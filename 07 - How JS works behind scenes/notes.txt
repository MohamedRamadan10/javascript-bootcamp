Javascript
    => is a high-level, object-oriented, multi-paradigm, interpreted or just-in-time compiled, dynamic, single threated, garbage-collection programming language with first-class functions and a non-blocking event loop concurrency modal

Multi-Paradigm
    => An approach and mindset of structuring code, which will direct your coding style and technique
        1- Procedural programming
        2- Object-oriented programming (OOP)
        3- Functional programming (FP)

First-class functions
    => In a language with first-class functions, functions are simply treated as variables. We can pass them into other functions, and return them from functions.

Dynamic
    => Dynamically-typed language

Concurrency modal
    => how the JS engine handles multiple tasks happening at the same time
        Why do we need that?
            JS runs into single thread, so it can only do one thing at a time
        So what about a long-running task?
            Sounds like it would block the single thread. However, we want non-blocking behavior
        How do we achieve that?
            By using an event loop: takes long running tasks, executes them in the "background", and puts them back in the main thread once they are finished

What's a JS engine?
    => Program that executes js code, ex: v8 engine(chrome)

    JS Engine contains
        1- Call stack => where our code is executed (execution context)
        2- Heap       => where objects are stored   (Object in memory)

Compilation vs interpretation
    1. Compilation    => Entire code is converted into machine code at once, and written to a binary file that can be executed by a computer
                    Source code ===================> Portable file: machine code =================> Program running 
                                Step 1 Compilation                               Step 2 Execution

    2. Interpretation => interpreter runs through the source code and executes it line by line 
                    Source code =======================================> Program running 
                                        Execution line by line

    so JS is interpreted language and there is one problem that much much slower than compiled languages, many people JS is already interpreted language but in the fact, JS use mix the interpreter and compiler called Just-in-time

    3. Just-in-time() => Entire code is converted into machine code at once, then executed immediately
                    Source code ===================> No Portable file: machine code =================> Program running 
                                Step 1 Compilation                                  Step 2 Execution

JS Engine
    Parsing (AST) abstract structure three
                    ⬇
        Compilation AST => machine code
                    ⬇  Optimization during execution
        Execution => happens in call stack

JS runtime
    Container including all the things that we need to use JS
        1. JS Engine
        2. Web APIs (DOM, Timers, Fetch API, ...)
        3. Callback Queue (click, timer, data, ...)


            An Execution Context
                    ⬇
        Creation of global execution
context (for top-level code => Not inside a function)
                    ⬇
    Execution top-level code (inside global EC)
                    ⬇
    Execution of functions and waiting for callbacks

Execution Context => Environment in which a piece of JS is executed. Stores all the necessary information for some code to be executed
    1. Exactly one global execution context (EC): default context, created for code that is not inside any function (top-level)
    2. One execution context per function: for each function call, a new execution context is created

What's inside execution context?    
    1. Variable Environment
        => let, const and var declarations
        => Functions
        => Arguments Objects (Not in arrow function)

    2. Scope Chain
    3. this keyword (Not in arrow function)

Scoping and scope in JS
    Scoping           => How our program's variables are organized and accessed. "Where do variables live?" or "Where can we access a certain variable, and where not?

    Lexical scoping   => Scoping is controlled by placement of functions and block in the code

    Scope             => Space or envirnoment in which a certain variable is declared (variable envirnoment in case of functions). There is global scope, function scope, and block scope

    Scope of variable => Region of our code where a certain variable can be accessed

The 3 types of scope
    Global Scope      => Outside of any function or block, variables declared in global scope are accessible everywhere

    Function Scope    => Variables are accessible only inside function, Not outside, also called local scope 

    Block Scope (ES6) => Variables are accessible only inside block (block scoped), However, this only applies to let and const variables!, Functions are also block scoped (only in strict mode)
